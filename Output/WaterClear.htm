<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\WaterClear.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\WaterClear.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Jan 05 16:33:23 2018
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MSG_Build &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[59]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_IRQHandler</a><BR>
 <LI><a href="#[7]">HardFault_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_IRQHandler</a><BR>
 <LI><a href="#[8]">SVC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_IRQHandler</a><BR>
 <LI><a href="#[9]">PendSV_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_IRQHandler</a><BR>
 <LI><a href="#[1b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[24]">CCM_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[20]">EUART0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[7]">HardFault_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[23]">I2C0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1a]">KINT_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1c]">LVD_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[6]">NMI_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[b]">PINT0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[c]">PINT1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[d]">PINT2_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[e]">PINT3_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[f]">PINT4_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[10]">PINT5_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[11]">PINT6_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[12]">PINT7_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1d]">PLLLK_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[9]">PendSV_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[19]">RTC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[25]">RegInit</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[5]">Reset_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[22]">SPI1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[8]">SVC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[a]">SysTick_IRQHandler</a> from my_systick.o(i.SysTick_IRQHandler) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_hr8p506_1.o(i.SystemInit) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[13]">T16N0_IRQHandler</a> from tds.o(i.T16N0_IRQHandler) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[14]">T16N1_IRQHandler</a> from tds.o(i.T16N1_IRQHandler) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[15]">T16N2_IRQHandler</a> from tds.o(i.T16N2_IRQHandler) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[16]">T16N3_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[17]">T32N0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1e]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1f]">UART1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[2a]">__main</a> from __main.o(!!!main) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[29]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[28]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[30]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[32]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[34]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[af]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MSG_Build &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>KINT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PLLLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>T16N3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>T32N0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RegInit</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hr8p506.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Build
</UL>

<P><STRONG><a name="[44]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[45]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[43]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[31]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[4a]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[78]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Deal
</UL>

<P><STRONG><a name="[76]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Build
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c4]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c5]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4e]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[4d]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c6]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[c7]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c8]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[42]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[28]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[33]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[35]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[48]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[54]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[55]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[56]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[57]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>GPIO_GetNormalBitOffsetFromPin</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, lib_gpio.o(i.GPIO_GetNormalBitOffsetFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSingalTypeFromPin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPUERegFromPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPDERegFromPin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetODERegFromPin
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDirRegFromPin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDSRegFromPin
</UL>

<P><STRONG><a name="[cd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>GPIO_Init</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSingalTypeFromPin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPUERegFromPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPDERegFromPin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetODERegFromPin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFuncxRegFromPin
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDirRegFromPin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDSRegFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[63]"></a>GPIO_SetDSRegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetDSRegFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDSRegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[60]"></a>GPIO_SetDirRegFromPin</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetDirRegFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDirRegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[61]"></a>GPIO_SetFuncxRegFromPin</STRONG> (Thumb, 1394 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetFuncxRegFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetFuncxRegFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[62]"></a>GPIO_SetODERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetODERegFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetODERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[65]"></a>GPIO_SetPDERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetPDERegFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPDERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[64]"></a>GPIO_SetPUERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetPUERegFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPUERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_SetSingalTypeFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(i.GPIO_SetSingalTypeFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[66]"></a>GSM_TCPC_INIT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sim800c.o(i.GSM_TCPC_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GSM_TCPC_INIT &rArr; UART0Write_Str
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>GSM_TCP_Connect</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, sim800c.o(i.GSM_TCP_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GSM_TCP_Connect &rArr; check_ststus &rArr; deal_string &rArr; UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ststus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>HardWare_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.HardWare_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HardWare_Init &rArr; sim800c_init &rArr; check_ststus &rArr; deal_string &rArr; UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>IAP_Unlock</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lib_flashiap.o(i.IAP_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[71]"></a>IAP_WriteCont</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lib_flashiap.o(i.IAP_WriteCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_WriteCont
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[72]"></a>IAP_WriteEnd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lib_flashiap.o(i.IAP_WriteEnd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[6f]"></a>IAP_WriteWord</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_flashiap.o(i.IAP_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteCont
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Unlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_To_EPROM
</UL>

<P><STRONG><a name="[74]"></a>MSG_Build</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, msgbuild.o(i.MSG_Build))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MSG_Build &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTDS
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>MSG_Deal</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, msgbuild.o(i.MSG_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MSG_Deal &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lib_scs.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[79]"></a>PLLClock_Config</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, lib_scu.o(i.PLLClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PLLClock_Config &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7c]"></a>SCU_SysClkSelect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lib_scu.o(i.SCU_SysClkSelect))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7a]"></a>Save_To_EPROM</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lib_flashiap.o(i.Save_To_EPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Save_To_EPROM &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
</UL>

<P><STRONG><a name="[a]"></a>SysTick_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, my_systick.o(i.SysTick_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SysTick_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lib_scs.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, system_hr8p506_1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; PLLClock_Config &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_SysClkSelect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLClock_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>T16N0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tds.o(i.T16N0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>T16N1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tds.o(i.T16N1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>T16N2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tds.o(i.T16N2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16N2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>T16Nx_BaseInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lib_timer.o(i.T16Nx_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[7f]"></a>T16Nx_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_timer.o(i.T16Nx_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>T16Nx_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(i.T16Nx_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[96]"></a>T16Nx_MAT0ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(i.T16Nx_MAT0ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_MAT0ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[97]"></a>T16Nx_SetCNT0</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lib_timer.o(i.T16Nx_SetCNT0))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[98]"></a>T16Nx_SetMAT0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_timer.o(i.T16Nx_SetMAT0))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tds_Init
</UL>

<P><STRONG><a name="[80]"></a>TCP_Recieve</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sim800c.o(i.TCP_Recieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TCP_Recieve &rArr; deal_string &rArr; UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_string
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Getch
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>UART0GetFun</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uart.o(i.UART0GetFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_string
</UL>

<P><STRONG><a name="[85]"></a>UART0GetStr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart.o(i.UART0GetStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0GetStr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IMEI
</UL>

<P><STRONG><a name="[82]"></a>UART0Getch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(i.UART0Getch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0Getch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Recieve
</UL>

<P><STRONG><a name="[86]"></a>UART0Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, uart.o(i.UART0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART0Init &rArr; UART_Init &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TBIMConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBIMConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
</UL>

<P><STRONG><a name="[8c]"></a>UART0Putch</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.UART0Putch))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>UART0Write_Str</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, uart.o(i.UART0Write_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0Write_Str
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IMEI
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ststus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCP_Connect
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCPC_INIT
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[87]"></a>UART_Init</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lib_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Init &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[89]"></a>UART_RBIMConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_uart.o(i.UART_RBIMConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RBIMConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[84]"></a>UART_RecByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_uart.o(i.UART_RecByte))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Getch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0GetStr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0GetFun
</UL>

<P><STRONG><a name="[88]"></a>UART_TBIMConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_uart.o(i.UART_TBIMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[7e]"></a>WDT_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lib_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lib_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFuncxRegFromPin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLClock_Config
</UL>

<P><STRONG><a name="[4b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6a]"></a>check_ststus</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, uart.o(i.check_ststus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = check_ststus &rArr; deal_string &rArr; UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_string
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCP_Connect
</UL>

<P><STRONG><a name="[81]"></a>deal_string</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, uart.o(i.deal_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = deal_string &rArr; UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0GetFun
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IMEI
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ststus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Recieve
</UL>

<P><STRONG><a name="[67]"></a>delay_nms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_systick.o(i.delay_nms))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IMEI
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCP_Connect
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCPC_INIT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
</UL>

<P><STRONG><a name="[75]"></a>getTDS</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, tds.o(i.getTDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getTDS
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Build
</UL>

<P><STRONG><a name="[93]"></a>get_IMEI</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sim800c.o(i.get_IMEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_IMEI &rArr; reset &rArr; Save_To_EPROM &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_string
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0GetStr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800c_init
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; MSG_Build &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Putch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Recieve
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Deal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSG_Build
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCP_Connect
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_TCPC_INIT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[94]"></a>reset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = reset &rArr; Save_To_EPROM &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_To_EPROM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IMEI
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>sim800c_init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, sim800c.o(i.sim800c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sim800c_init &rArr; check_ststus &rArr; deal_string &rArr; UART0GetFun
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IMEI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_string
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ststus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Write_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[6d]"></a>tds_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tds.o(i.tds_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tds_Init &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT0
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetCNT0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ITConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[6c]"></a>timer_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tds.o(i.timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = timer_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT0
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetCNT0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ITConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9a]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[ce]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_flashiap.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[29]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[53]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[46]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[47]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
